version: '3.9'


services:
  discovery-service:
    image: amazoncorretto:11
    volumes:
      - ./apps/discovery-service/build/libs/discovery-service.jar:/app/discovery-service.jar
    working_dir: /app
    command: java -jar discovery-service.jar
    networks:
      - lms-network
    deploy:
      replicas: 1
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 10s

  config-service:
    image: amazoncorretto:11
    volumes:
      - ./apps/config-service/build/libs/config-service.jar:/app/config-service.jar
    working_dir: /app
    environment:
      - eureka.client.serviceUrl.defaultZone=http://discovery-service:8761/eureka/
      - CLOUD_CONFIG_GITHUB_TOKEN
    command: java -jar config-service.jar
    networks:
      - lms-network
    depends_on:
      discovery-service:
        condition: service_healthy
    deploy:
      replicas: 1
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8078/actuator/health" ]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 10s

  api-gateway:
    image: amazoncorretto:11
    volumes:
      - ./apps/api-gateway/build/libs/api-gateway.jar:/app/api-gateway.jar
    working_dir: /app
    environment:
      - spring.cloud.config.enabled=true
      - spring.config.import=optional:configserver:http://config-service:8078
      - spring.profiles.active=dpe
    command: java -jar api-gateway.jar
    networks:
      - lms-network
    depends_on:
      config-service:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
    deploy:
      replicas: 1

  auth-service:
    image: amazoncorretto:11
    volumes:
      - ./apps/auth-service/build/libs/auth-service.jar:/app/auth-service.jar
    working_dir: /app
    environment:
      - spring.cloud.config.enabled=true
      - spring.config.import=optional:configserver:http://config-service:8078
      - spring.profiles.active=dpe
      - AUTH_SERVICE_DB_PASSWORD
      - AUTH_SERVICE_ACCESS_TOKEN_SECRET
      - AUTH_SERVICE_REFRESH_TOKEN_SECRET
    command: java -jar auth-service.jar
    networks:
      - lms-network
    depends_on:
      config-service:
        condition: service_healthy
      auth-service-db:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
      user-management-service:
        condition: service_healthy
    deploy:
      replicas: 1

  user-management-service:
    image: amazoncorretto:11
    volumes:
      - ./apps/user-management-service/build/libs/user-management-service.jar:/app/user-management-service.jar
    working_dir: /app
    environment:
      - spring.cloud.config.enabled=true
      - spring.config.import=optional:configserver:http://config-service:8078
      - spring.profiles.active=dpe
      - USER_MANAGEMENT_SERVICE_DB_NAME
      - USER_MANAGEMENT_SERVICE_DB_USER
      - USER_MANAGEMENT_SERVICE_DB_PASSWORD
    command: java -jar user-management-service.jar
    networks:
      - lms-network
    depends_on:
      config-service:
        condition: service_healthy
      user-management-service-db:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
    deploy:
      replicas: 1
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/api/actuator/health" ]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 10s

  ################################ DB ################################

  user-management-service-db:
    image: postgres:${USER_MANAGEMENT_SERVICE_DB_VERSION}
    environment:
      POSTGRES_DB: ${USER_MANAGEMENT_SERVICE_DB_NAME}
      POSTGRES_USER: ${USER_MANAGEMENT_SERVICE_DB_USER}
      POSTGRES_PASSWORD: ${USER_MANAGEMENT_SERVICE_DB_PASSWORD}
    volumes:
      - user-management-service-db-data:/var/lib/postgresql/data
    networks:
      - lms-network
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 3s

  auth-service-db:
    image: redis:alpine
    command: redis-server --requirepass ${AUTH_SERVICE_DB_PASSWORD}
    environment:
      - AUTH_SERVICE_DB_PASSWORD
    volumes:
      - auth-service-db-data:/data
    networks:
      - lms-network
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli ping -a ${AUTH_SERVICE_DB_PASSWORD} | grep PONG" ]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 2s


volumes:
  user-management-service-db-data:
  auth-service-db-data:


networks:
  lms-network:
    driver: bridge
