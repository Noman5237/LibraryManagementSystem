version: '3.9'


services:
  discovery-service:
    image: amazoncorretto:11
    volumes:
      - ./apps/discovery-service/build/libs/discovery-service.jar:/app/discovery-service.jar
    working_dir: /app
    command: java -jar discovery-service.jar
    networks:
      - lms-network
    deploy:
      replicas: 1
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 10s

  config-service:
    image: amazoncorretto:11
    volumes:
      - ./apps/config-service/build/libs/config-service.jar:/app/config-service.jar
    working_dir: /app
    environment:
      - eureka.client.serviceUrl.defaultZone=http://discovery-service:8761/eureka/
      - CLOUD_CONFIG_GITHUB_TOKEN
    command: java -jar config-service.jar
    networks:
      - lms-network
    depends_on:
      discovery-service:
        condition: service_healthy
    deploy:
      replicas: 1
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8078/actuator/health" ]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 10s

  api-gateway:
    image: amazoncorretto:11
    volumes:
      - ./apps/api-gateway/build/libs/api-gateway.jar:/app/api-gateway.jar
    working_dir: /app
    environment:
      - spring.cloud.config.enabled=true
      - spring.config.import=optional:configserver:http://config-service:8078
      - spring.profiles.active=dpe
    command: java -jar api-gateway.jar
    networks:
      - lms-network
    depends_on:
      config-service:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
    deploy:
      replicas: 1

  auth-service:
    image: amazoncorretto:11
    volumes:
      - ./apps/auth-service/build/libs/auth-service.jar:/app/auth-service.jar
    working_dir: /app
    environment:
      - spring.cloud.config.enabled=true
      - spring.config.import=optional:configserver:http://config-service:8078
      - spring.profiles.active=dpe
      - AUTH_SERVICE_DB_PASSWORD
      - AUTH_SERVICE_ACCESS_TOKEN_SECRET
      - AUTH_SERVICE_REFRESH_TOKEN_SECRET
    command: java -agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5082 -Djava.security.egd=file:/dev/./urandom -jar auth-service.jar
    networks:
      - lms-network
    depends_on:
      config-service:
        condition: service_healthy
      auth-service-db:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
      user-management-service:
        condition: service_healthy
    deploy:
      replicas: 1


  user-management-service:
    image: amazoncorretto:11
    volumes:
      - ./apps/user-management-service/build/libs/user-management-service.jar:/app/user-management-service.jar
    working_dir: /app
    environment:
      - spring.cloud.config.enabled=true
      - spring.config.import=optional:configserver:http://config-service:8078
      - spring.profiles.active=dpe
      - USER_MANAGEMENT_SERVICE_DB_NAME
      - USER_MANAGEMENT_SERVICE_DB_USER
      - USER_MANAGEMENT_SERVICE_DB_PASSWORD
    command: java -agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5081 -Djava.security.egd=file:/dev/./urandom -jar user-management-service.jar
    networks:
      - lms-network
    depends_on:
      config-service:
        condition: service_healthy
      user-management-service-db:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
    deploy:
      replicas: 1
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/api/actuator/health" ]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 10s

  ################################ DB ################################

  user-management-service-db:
    image: postgres:${USER_MANAGEMENT_SERVICE_DB_VERSION}
    environment:
      POSTGRES_DB: ${USER_MANAGEMENT_SERVICE_DB_NAME}
      POSTGRES_USER: ${USER_MANAGEMENT_SERVICE_DB_USER}
      POSTGRES_PASSWORD: ${USER_MANAGEMENT_SERVICE_DB_PASSWORD}
    volumes:
      - user-management-service-db-data:/var/lib/postgresql/data
    networks:
      - lms-network
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 3s

  auth-service-db:
    image: redis:alpine
    command: redis-server --requirepass ${AUTH_SERVICE_DB_PASSWORD}
    environment:
      - AUTH_SERVICE_DB_PASSWORD
    volumes:
      - auth-service-db-data:/data
    networks:
      - lms-network
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD-SHELL", 'redis-cli -a "$$AUTH_SERVICE_DB_PASSWORD" PING | grep PONG' ]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 2s

  notification-service-db:
    image: postgres:${NOTIFICATION_SERVICE_DB_VERSION}
    environment:
      POSTGRES_DB: ${NOTIFICATION_SERVICE_DB_NAME}
      POSTGRES_USER: ${NOTIFICATION_SERVICE_DB_USER}
      POSTGRES_PASSWORD: ${NOTIFICATION_SERVICE_DB_PASSWORD}
    volumes:
      - notification-service-db-data:/var/lib/postgresql/data
    networks:
      - lms-network
    ports:
      - "5433:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 3s

  ################################ Event Store Stream ################################

  # scale to 3 for production
  event-store-stream-config-service:
    image: confluentinc/cp-zookeeper:7.3.2
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - event-store-stream-config-service-data:/var/lib/zookeeper
    networks:
      - lms-network

  # scale to 3 for production
  event-store-stream-message-broker:
    image: confluentinc/cp-kafka:7.3.2
    ports:
      # To learn about configuring Kafka for access across networks see
      # https://www.confluent.io/blog/kafka-client-cannot-connect-to-broker-on-aws-on-docker-etc/
      - "19092:19092"
    depends_on:
      - event-store-stream-config-service
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'event-store-stream-config-service:2181'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://event-store-stream-message-broker:9092,CONNECTIONS_FROM_HOST://localhost:19092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONNECTIONS_FROM_HOST:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    volumes:
      - event-store-stream-config-service-data:/var/lib/kafka
    networks:
      - lms-network

  # setup configuration files
  event-store-stream-message-broker-ui:
    image: provectuslabs/kafka-ui
    ports:
      - "8077:8080"
    depends_on:
      - event-store-stream-message-broker
      - event-store-stream-config-service
    environment:
        KAFKA_CLUSTERS_0_NAME: local-broker
        KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: event-store-stream-message-broker:9092
    networks:
      - lms-network

volumes:
  user-management-service-db-data:
  auth-service-db-data:
  notification-service-db-data:
  event-store-stream-config-service-data:


networks:
  lms-network:
    driver: bridge
